;#lang racket
;(define new-prompt make-continuation-prompt-tag)
;(define (push-prompt p f) (call-with-continuation-prompt f p (lambda (thunk) (thunk)) '()))
;(define (with-subcont p f) (call-with-composable-continuation (lambda (k) (abort-current-continuation p (lambda () (f k)))) p))
;(define (push-subcont sk f) (call-in-continuation sk (lambda () (f '()))))
(let* ((append (lambda (xs)
                 (lambda (ys)
                   (letrec ((loop (lambda (xs)
                                    (if (pair? xs)
                                        (cons (car xs) (loop (cdr xs)))
                                        ys))))
                     (loop xs)))))
       ;(_ (display ((append (list 1 3 5)) (list 2 4 6))))
       (choose
        (lambda (p)
          (lambda (xs)
            (with-subcont p
                          (lambda (cont)
                            (letrec ((loop (lambda (xs)
                                             (if (pair? xs)
                                                 ((append (push-prompt p (lambda (_) (push-subcont cont (lambda (_) (car xs))))))
                                                  (loop (cdr xs)))
                                                 '()))))
                              (loop xs)))))))
       (run (lambda (f)
              (let ((p (new-prompt)))
                (push-prompt p (lambda (_) (f p))))))
       (result (run (lambda (p)
                      (let* ((x ((choose p) (list 0 1 2)))
                             (y ((choose p) (list 0 1 2)))
                             (z ((choose p) (list 0 1 2))))
                        (if (= (+ x (+ y z)) 3)
                            (list (list x y z))
                            '()))))))
  (display result))
