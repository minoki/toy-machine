%%

%pos int

%term INT of int
    | NAME of string
    | NIL
    | LPAREN
    | RPAREN
    | LAMBDA
    | LET
    | LET_STAR
    | LETREC
    | IF
    | TRUE
    | FALSE
    | PLUS
    | MINUS
    | EQ
    | LT
    | LE
    | PRINT
    | EOF
%nonterm exp of Syntax.exp
       | bindings of (string * Syntax.exp) list
       | program of Syntax.exp list
       | start of Syntax.exp list

%name ToyLang

%eop EOF
%noshift EOF
%start start

%%

start : program (program)

program : ([])
        | exp program (exp :: program)

exp : NIL (Syntax.NIL)
    | INT (Syntax.INT INT)
    | NAME (Syntax.VAR NAME)
    | TRUE (Syntax.BOOL true)
    | FALSE (Syntax.BOOL false)
    | LPAREN LAMBDA LPAREN NAME RPAREN exp RPAREN (Syntax.LAMBDA (NAME, exp))
    | LPAREN LET LPAREN bindings RPAREN exp RPAREN (Syntax.LET (bindings, exp))
    | LPAREN LET_STAR LPAREN bindings RPAREN exp RPAREN (List.foldr (fn (binding, exp) => Syntax.LET ([binding], exp)) exp bindings)
    | LPAREN LETREC LPAREN bindings RPAREN exp RPAREN (Syntax.LETREC (bindings, exp))
    | LPAREN IF exp exp exp RPAREN (Syntax.IF (exp1, exp2, exp3))
    | LPAREN PLUS exp exp RPAREN (Syntax.PLUS (exp1, exp2))
    | LPAREN MINUS exp exp RPAREN (Syntax.MINUS (exp1, exp2))
    | LPAREN EQ exp exp RPAREN (Syntax.EQ (exp1, exp2))
    | LPAREN LT exp exp RPAREN (Syntax.LT (exp1, exp2))
    | LPAREN LE exp exp RPAREN (Syntax.LE (exp1, exp2))
    | LPAREN PRINT exp RPAREN (Syntax.PRINT exp)
    | LPAREN exp exp RPAREN (Syntax.APP (exp1, exp2))

bindings : ([])
         | LPAREN NAME exp RPAREN bindings ((NAME, exp) :: bindings)
